#include <stdio.h>
#include <glut.h>
//float anticlock=0.0;
void pic(void)
{
	glColor3f(1,0,0);
	glBegin(GL_TRIANGLES);
		glVertex2f(0,0);
		glVertex2f(.07,.20);
		glVertex2f(-0.07,.20);
	glEnd();
	glFlush();
	glColor3f(0,1,0);
	glBegin(GL_POLYGON);
		glVertex2f(0,.20);
		glVertex2f(.12,.35);
		glVertex2f(0,.50);
		glVertex2f(-0.12,.35);
		glVertex2f(0,.50);
	glEnd();
	glFlush();
	glColor3f(0,0,1);
	glBegin(GL_POLYGON);
		glVertex2f(0 ,.50);
		glVertex2f(.15,.60);
		glVertex2f(.05,.70);
		glVertex2f(0,.70);
		
		glVertex2f(0 ,.50);
		glVertex2f(-.15,.60);
		glVertex2f(-.05,.70);
		glVertex2f(0,.70);
	glEnd();
	glFlush();
	glBegin(GL_POLYGON);
		glColor3f(0,1,0);
		glVertex2f(0,.70);
		glVertex2f(.05,.70);
		glColor3f(1,0,0);
		glVertex2f(.10,.80);
		glColor3f(0,0,1);
		glVertex2f(0,.95);

		glColor3f(0,0,1);
		glVertex2f(0,.70);
		glVertex2f(-.05,.70);
		glColor3f(1,0,0);
		glVertex2f(-0.10,.80);
		glColor3f(0,0,1);
		glVertex2f(0,.95);
	glEnd();
	glFlush();
}

void play(){
	for (int i = 0; i <= 360; i+=360){
		glPushMatrix();
		//glRotatef(float(i), 0, 0, 1);
		pic();
		glPopMatrix();
		glFlush();
	}
	
}

void display(void)
{
	glClear(GL_COLOR_BUFFER_BIT);
	/*if(anticlock >= 360.0) 
	{
		anticlock = 0.0;
	}*/

	glPushMatrix();
	//glRotatef(anticlock, 0, 0, 1);
	play();
	glPopMatrix();
	//anticlock =anticlock-0.1;
	glutSwapBuffers();
	glutPostRedisplay();
	

}
void pic2()
{
	glColor3f(0,1,0);
	glBegin(GL_POLYGON);
		glVertex2f(0,.20);
		glVertex2f(.12,.35);
		glVertex2f(0,.50);
		glVertex2f(-0.12,.35);
		glVertex2f(0,.50);
	glEnd();
	glFlush();
}

void play2()
{
		glPushMatrix();
		//glRotatef(float(i), 0, 0, 1);
		pic2();
		glPopMatrix();
		glFlush();
}

void display2()
{
		glClear(GL_COLOR_BUFFER_BIT);
	/*if(anticlock >= 360.0) 
	{
		anticlock = 0.0;
	}*/

	glPushMatrix();
	//glRotatef(anticlock, 0, 0, 1);
	play2();
	glPopMatrix();
	//anticlock =anticlock-0.1;
	glutSwapBuffers();
	glutPostRedisplay();
}

void keyboard(unsigned char c,int x,int y)
{
	switch (c){
	case 'T':
		glTranslated(0.2,0.4,1);
		glutPostRedisplay();
		break;
	case 'R':
		glRotated(45,0,0,1);
		glutPostRedisplay();
		break;
	case 'I':
		glutDisplayFunc(display2);
		//glRotated(45,0,0,1);
		break;
	case 'P':
		glutDisplayFunc(display);
		break;

	default:
		glScaled(.7,.7,1.0);
		glutPostRedisplay();
		
	}

}


int main(int argc, char** argv)
{
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_DOUBLE);
	glutInitWindowSize(700,700);
	glutInitWindowPosition(300,-200);
	glutCreateWindow("Graphic Design");
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	glutDisplayFunc(display);
	glutKeyboardFunc(keyboard);
	glutMainLoop();
	return 0;
}